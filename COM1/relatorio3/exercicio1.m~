clear all;
close all;
clc;

Vpp = 2; % escala de tensao
k = 3; % quantidade de bits do quantizador

[x_n,Fs_in] = audioread('cartoon-birds-2.wav');
x_n = x_n(:,1); % pega somente a primeira coluna

audio_original = audioplayer(x_n, Fs_in);
play(audio_original)

end_t = (length(x_n)/Fs_in-(1/Fs_in));
t = [0:1/Fs_in:end_t];
f = [-Fs_in/2:1/end_t:Fs_in/2];
x_n_fft = fftshift(fft(x_n)/length(x_n));
figure(1)
subplot(121)
plot(t, x_n)
title('Áudio no tempo')
xlabel('Tempo [s]')
ylabel('Amplitude [V]')
subplot(122)
plot(f, abs(x_n_fft))
title('Espectro do áudio')
xlabel('Frequência [Hz]')
ylabel('Amplitude [V]')
pause(8) % intervalo para reproducao do audio

f_cut = 8e3;
filtro_PB = fir1(100, (f_cut*2)/Fs_in);

i = 2;
for k = [3 5]
    passo_q = Vpp/(2^k); % passo de quantizacao
    
    x_quant_1 = x_n + ((Vpp/2)-(passo_q/2)); % deslocamento pra cima
    x_quant_2 = x_quant_1/passo_q; % joga pro nivel de tensao
    x_quant_3 = round(x_quant_2); % arredonda
    aux1 = x_quant_3 == 2^k; % gera vetor de "bool" pra 8
    aux2 = x_quant_3 == -1; % gera vetor de "bool" pra -1
    x_quant_4 = x_quant_3 - aux1; % ajusta max ate 2^k-1
    x_quant = x_quant_4 + aux2; % ajusta min em 0

    x_bin_1 = de2bi(x_quant);
    [linha, coluna] = size(x_bin_1);
    x_bin = reshape(transpose(x_bin_1), 1, linha*coluna);

    % voltando ...
    x_dec_1 = reshape(x_bin, coluna, linha);
    x_dec_2 = transpose(x_dec_1);
    x_dec = transpose(bi2de(x_dec_2));
    x_n_rec_1 = x_dec * passo_q;
    x_n_rec = x_n_rec_1 - ((Vpp/2)-(passo_q/2));

    x_n_rec_fft = fftshift(fft(x_n_rec)/length(x_n_rec));
    y_n = filter(filtro_PB, 1, x_n_rec);
    y_fft = fftshift(fft(y_t)/length(y_t));
    
    
    figure(i)
    suptitle(['Quantização de ',num2str(k),' bits'])
    subplot(221)
    plot(t, x_n_rec)
    title('Áudio no tempo')
    xlabel('Tempo [s]')
    ylabel('Amplitude [V]')
    subplot(222)
    plot(f, abs(x_n_rec_fft))
    title('Espectro do áudio')
    xlabel('Frequência [Hz]')
    ylabel('Amplitude [V]')
    subplot(223)
    plot(t, y_n)
    title('Áudio com filtro 8 KHz')
    xlabel('Tempo [s]')
    ylabel('Amplitude [V]')
    subplot(224)
    plot(f, abs(y_fft))
    title('Espectro do áudio filtrado')
    xlabel('Frequência [Hz]')
    ylabel('Amplitude [V]')

    audio_recuperado = audioplayer(x_n_rec', Fs_in);
    play(audio_recuperado)
    pause(8) % intervalo para reproducao do audio
    audio_recuperado_filtrado = audioplayer(y_n', Fs_in);
    play(audio_recuperado_filtrado)
    pause(8) % intervalo para reproducao do audio
    i = i+1;
end
